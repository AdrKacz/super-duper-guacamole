Transform: AWS::Serverless-2016-10-31

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs14.x
    Handler: app.handler
    Environment:
      Variables:
        USERS_TABLE_NAME: !Ref UsersTableName
        GROUPS_TABLE_NAME: !Ref GroupsTableName
        BANNED_USERS_TABLE_NAME: !Ref BannedUsersTableName

Description: >
  sam-rooms

  Manage users and their conversation in groups

Parameters:
  UsersTableName:
    Type: String
    Default: 'users'
    Description: '(Required) The name of the new DynamoDB to store registered users. Minimum 3 characters.'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  GroupsTableName:
    Type: String
    Default: 'groups'
    Description: '(Required) The name of the new DynamoDB to store registered users. Minimum 3 characters.'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  BannedUsersTableName:
    Type: String
    Default: 'bannedusers'
    Description: '(Required) The name of the new DynamoDB to store users under ban vote. Minimum 3 characters.'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  StageName:
    Type: String
    Default: 'development'
    Description: '(Required) The name of the stage of the API. Minimum 3 characters.'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  
Resources:
  # Database
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Ref UsersTableName
  GroupsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Ref GroupsTableName
  BannedUsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Ref BannedUsersTableName

  # Web Socket
  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleChatWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # Routes
  RegisterRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: register
      AuthorizationType: NONE
      OperationName: RegisterRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref RegisterIntegration
  RegisterIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Register Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterFunction.Arn}/invocations

  SwitchGroupRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: switchgroup
      AuthorizationType: NONE
      OperationName: SwitchGroupRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SwitchGroupIntegration
  SwitchGroupIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Switch Group Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SwitchGroupFunction.Arn}/invocations

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendMessageRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendMessageIntegration
  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Send Message Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

  BanRequestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: banrequest
      AuthorizationType: NONE
      OperationName: BanRequestRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref BanRequestIntegration
  BanRequestIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Send Message Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BanRequestFunction.Arn}/invocations

  # Stage
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - RegisterRoute
    - SwitchGroupRoute
    - SendMessageRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      Description: !Sub '${StageName} Stage'
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket

  # Layers Functions
  HelperLayerVersion:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: dependencies/
      RetentionPolicy: Delete 

  # Functions
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: register/
      Layers:
        - !Ref HelperLayerVersion
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/${StageName}/POST/*'
  RegisterPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RegisterFunction
      Principal: apigateway.amazonaws.com

  SwitchGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: switchgroup/
      Layers:
        - !Ref HelperLayerVersion
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref GroupsTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref BannedUsersTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/${StageName}/POST/*'
  SwitchGroupPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SwitchGroupFunction
      Principal: apigateway.amazonaws.com

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendmessage/
      Layers:
        - !Ref HelperLayerVersion
      Environment:
        Variables:
          NOTIFICATION_LAMBDA_ARN: !GetAtt NotificationFunction.Arn
      Policies:
      - LambdaInvokePolicy:
          FunctionName: !Ref NotificationFunction
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/${StageName}/POST/*'
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

  BanRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ban/banrequest/
      Layers:
        - !Ref HelperLayerVersion
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref BannedUsersTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/${StageName}/POST/*'
  BanRequestPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BanRequestFunction
      Principal: apigateway.amazonaws.com
    
  # Notification
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: notification/
      Environment:
        Variables:
          FIREBASE_SERVICE_ACCOUNT_KEY: '{{resolve:ssm:firebase_service_account_key:1}}'
  NotificationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NotificationFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt SendMessageFunction.Arn
        
Outputs:
  UsersTableArn:
    Description: "Users table ARN"
    Value: !GetAtt UsersTable.Arn
  GroupsTableArn:
    Description: "Groups table ARN"
    Value: !GetAtt GroupsTable.Arn
  BannedUsersTableArn:
    Description: "Banned Users table ARN"
    Value: !GetAtt BannedUsersTable.Arn

  RegisterFunctionArn:
    Description: "Register function ARN"
    Value: !GetAtt RegisterFunction.Arn
  SwitchGroupFunctionArn:
    Description: "Switch Group function ARN"
    Value: !GetAtt SwitchGroupFunction.Arn
  SendMessageFunctionArn:
    Description: "Send Message function ARN"
    Value: !GetAtt SendMessageFunction.Arn
  BanRequestFunctionArn:
    Description: "Ban Request function ARN"
    Value: !GetAtt BanRequestFunction.Arn

  NotificationFunctionArn:
    Description: "Notification function ARN"
    Value: !GetAtt NotificationFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref SimpleChatWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]

