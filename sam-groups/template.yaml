Transform: AWS::Serverless-2016-10-31

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs14.x
    Handler: app.handler
    Environment:
      Variables:
        USERS_TABLE_NAME: !Ref UsersTableName
        GROUPS_TABLE_NAME: !Ref GroupsTableName

Description: >
  sam-group

  Manage users and their conversation in groups

Parameters:
  UsersTableName:
    Type: String
    Default: 'users'
    Description: '(Required) The name of the new DynamoDB to store registered users. Minimum 3 characters.'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  GroupsTableName:
    Type: String
    Default: 'groups'
    Description: '(Required) The name of the new DynamoDB to store registered users. Minimum 3 characters.'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  ConfirmationRequired:
    Type: Number
    Default: 2
    Description: '(Required) The number of the users required to ban someone from a group. The effective number of confirmation required will be the minimum between this number and the number of users who have received the ban request.'
    ConstraintDescription: 'Required. Must be an integer.'
  LogRetentionInDays:
    Type: Number
    Default: 1
    Description: '(Required) The number of days logs are kept.'
    ConstraintDescription: 'Required. Must be an integer.'
  StageName:
    Type: String
    Default: 'development'
    Description: '(Required) The name of the stage of the API. Minimum 3 characters.'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  
Resources:
  # Database
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Ref UsersTableName
  GroupsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Ref GroupsTableName

  # Web Socket
  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'SamGroup-SimpleChatWebSocket-${StageName}'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # Routes
  RegisterRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: register
      AuthorizationType: NONE
      OperationName: RegisterRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref RegisterIntegration
  RegisterIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Register Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ActionRegisterFunction.Arn}/invocations

  SwitchGroupRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: switchgroup
      AuthorizationType: NONE
      OperationName: SwitchGroupRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SwitchGroupIntegration
  SwitchGroupIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Switch Group Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ActionSwitchGroupFunction.Arn}/invocations

  TextMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: textmessage
      AuthorizationType: NONE
      OperationName: TextMessageRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref TextMessageIntegration
  TextMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Send Text Message Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ActionTextMessageFunction.Arn}/invocations

  BanRequestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: banrequest
      AuthorizationType: NONE
      OperationName: BanRequestRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref BanRequestIntegration
  BanRequestIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Ban Request Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ActionBanRequestFunction.Arn}/invocations

  BanReplyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: banreply
      AuthorizationType: NONE
      OperationName: BanReplyRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref BanReplyIntegration
  BanReplyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Ban Reply Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ActionBanReplyFunction.Arn}/invocations

  # Deployment
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - RegisterRoute
    - SwitchGroupRoute
    - TextMessageRoute
    - BanRequestRoute
    - BanReplyRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      Description: !Sub '${StageName} Stage'
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket

  # Layers Functions
  AWSSDKApiLayerVersion:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: .dependencies/aws-sdk-api
      RetentionPolicy: Delete 
  
  AWSSDKDdbLayerVersion:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: .dependencies/aws-sdk-ddb
      RetentionPolicy: Delete 

  AWSSDKSnsLayerVersion:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: .dependencies/aws-sdk-sns
      RetentionPolicy: Delete 

  FirebaseAdminLayerVersion:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: .dependencies/firebase-admin
      RetentionPolicy: Delete 

  # ===== ===== =====
  # Simple Notification Systems
  SendMessageSNSTopic:
    Type: AWS::SNS::Topic
  
  SwitchGroupSNSTopic:
    Type: AWS::SNS::Topic

  SendNotificationSNSTopic:
    Type: AWS::SNS::Topic

  # ===== ===== =====
  # Backend Functions
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendmessage/
      Layers:
        - !Ref AWSSDKApiLayerVersion
        - !Ref AWSSDKDdbLayerVersion
      Environment:
        Variables:
          WEB_SOCKET_ENDPOINT: !Sub '${SimpleChatWebSocket.ApiEndpoint}/${Stage}'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/${StageName}/POST/*'
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SendMessageSNSTopic
  SendMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SendMessageFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  SwitchGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: switchgroup/
      Layers:
        - !Ref AWSSDKDdbLayerVersion
        - !Ref AWSSDKSnsLayerVersion
      Environment:
        Variables:
          SEND_MESSAGE_TOPIC_ARN: !Ref SendMessageSNSTopic
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref GroupsTableName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SendMessageSNSTopic.TopicName
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SwitchGroupSNSTopic
  SwitchGroupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SwitchGroupFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  SendNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendnotification/
      Layers:
        - !Ref FirebaseAdminLayerVersion
      Environment:
        Variables:
          FIREBASE_SERVICE_ACCOUNT_KEY: '{{resolve:ssm:firebase_service_account_key:1}}'
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref SendNotificationSNSTopic
  SendNotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SendNotificationFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # ===== ===== =====
  # Action Functions
  ActionRegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: actionregister/
      Layers:
        - !Ref AWSSDKDdbLayerVersion
        - !Ref AWSSDKSnsLayerVersion
      Environment:
        Variables:
          SEND_MESSAGE_TOPIC_ARN: !Ref SendMessageSNSTopic
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SendMessageSNSTopic.TopicName
  ActionRegisterPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ActionRegisterFunction
      Principal: apigateway.amazonaws.com
  ActionRegisterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ActionRegisterFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  ActionSwitchGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: actionswitchgroup/
      Layers:
        - !Ref AWSSDKDdbLayerVersion
        - !Ref AWSSDKSnsLayerVersion
      Environment:
        Variables:
          SWITCH_GROUP_TOPIC_ARN: !Ref SwitchGroupSNSTopic
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SwitchGroupSNSTopic.TopicName
  ActionSwitchGroupPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ActionSwitchGroupFunction
      Principal: apigateway.amazonaws.com
  ActionSwitchGroupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ActionSwitchGroupFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  ActionTextMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: actiontextmessage/
      Layers:
        - !Ref AWSSDKDdbLayerVersion
        - !Ref AWSSDKSnsLayerVersion
      Environment:
        Variables:
          SEND_MESSAGE_TOPIC_ARN: !Ref SendMessageSNSTopic
          SEND_NOTIFICATION_TOPIC_ARN: !Ref SendNotificationSNSTopic
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTableName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SendMessageSNSTopic.TopicName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SendNotificationSNSTopic.TopicName
  ActionTextMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ActionTextMessageFunction
      Principal: apigateway.amazonaws.com
  ActionTextMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ActionTextMessageFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  ActionBanRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: actionbanrequest/
      Layers:
        - !Ref AWSSDKDdbLayerVersion
        - !Ref AWSSDKSnsLayerVersion
      Environment:
        Variables:
          CONFIRMATION_REQUIRED_STRING: !Ref ConfirmationRequired 
          SEND_MESSAGE_TOPIC_ARN: !Ref SendMessageSNSTopic
          SEND_NOTIFICATION_TOPIC_ARN: !Ref SendNotificationSNSTopic
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTableName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SendMessageSNSTopic.TopicName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SendNotificationSNSTopic.TopicName
  ActionBanRequestPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ActionBanRequestFunction
      Principal: apigateway.amazonaws.com
  ActionBanRequestLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ActionBanRequestFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  ActionBanReplyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: actionbanreply/
      Layers:
        - !Ref AWSSDKDdbLayerVersion
        - !Ref AWSSDKSnsLayerVersion
      Environment:
        Variables:
          SEND_MESSAGE_TOPIC_ARN: !Ref SendMessageSNSTopic
          SEND_NOTIFICATION_TOPIC_ARN: !Ref SendNotificationSNSTopic
          SWITCH_GROUP_TOPIC_ARN: !Ref SwitchGroupSNSTopic
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTableName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SendMessageSNSTopic.TopicName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SendNotificationSNSTopic.TopicName
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt SwitchGroupSNSTopic.TopicName
  ActionBanReplyPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ActionBanReplyFunction
      Principal: apigateway.amazonaws.com
  ActionBanReplyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ActionBanReplyFunction}'
      RetentionInDays: !Ref LogRetentionInDays
    
Outputs:
  UsersTableArn:
    Description: "Users table ARN"
    Value: !GetAtt UsersTable.Arn
  GroupsTableArn:
    Description: "Groups table ARN"
    Value: !GetAtt GroupsTable.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Sub '${SimpleChatWebSocket.ApiEndpoint}/${Stage}'

