Transform: AWS::Serverless-2016-10-31

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 256
    Timeout: 5
    Runtime: nodejs16.x
    Handler: app.handler
    Environment:
      Variables:
        USERS_TABLE_NAME: !Ref UsersTable
        GROUPS_TABLE_NAME: !Ref GroupsTable
        USERS_CONNECTION_ID_INDEX_NAME: "ConnectionIdIndex"
        USERS_GROUP_ID_INDEX_NAME: "GroupIdIndex"
        GROUPS_BUBBLE_INDEX_NAME: "BubbleIndex"
        MINIMUM_GROUP_SIZE: !Ref MinimumGroupSize
        MAXIMUM_GROUP_SIZE: !Ref MaximumGroupSize

Description: >
  Awa

  Users, groups

Parameters:
  MinimumGroupSize:
    Type: Number
    Default: 3
    Description: '(Required) The minimum number of users on a group to be opened.'
    ConstraintDescription: 'Required. Must be an integer.'
  MaximumGroupSize:
    Type: Number
    Default: 5
    Description: '(Required) The maximum number of users on a group'
    ConstraintDescription: 'Required. Must be an integer.'
  ConfirmationRequired:
    Type: Number
    Default: 2
    Description: '(Required) The number of the users required to ban someone from a group. The effective number of confirmation required will be the minimum between this number and the number of users who have received the ban request.'
    ConstraintDescription: 'Required. Must be an integer.'
  LogRetentionInDays:
    Type: Number
    Default: 1
    Description: '(Required) The number of days logs are kept.'
    ConstraintDescription: 'Required. Must be an integer.'
  WebSocketThrottlingBurstLimit:
    Type: Number
    Default: 1
    Description: '(Required) The maximum number of concurrent messages before receiving "429 Too Many Requests".'
    ConstraintDescription: 'Required. Must be an integer.'
  WebSocketThrottlingRateLimit:
    Type: Number
    Default: 1
    Description: '(Required) The maximum number messages per seconds before receiving "429 Too Many Requests".'
    ConstraintDescription: 'Required. Must be an integer.'
  ApiThrottlingBurstLimit:
    Type: Number
    Default: 1
    Description: '(Required) The maximum number of concurrent messages before receiving "429 Too Many Requests".'
    ConstraintDescription: 'Required. Must be an integer.'
  ApiThrottlingRateLimit:
    Type: Number
    Default: 1
    Description: '(Required) The maximum number messages per seconds before receiving "429 Too Many Requests".'
    ConstraintDescription: 'Required. Must be an integer.'
  StageName:
    Type: String
    Default: 'development'
    Description: '(Required) The name of the stage of the API. Minimum 3 characters.'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[0-9a-z-]+$
    ConstraintDescription: 'Required. ^[0-9a-z-]+$.'
  AuthenticationStage:
    Type: String
    Default: 'development'
    Description: '(Required) The name of the authentication stage of the API. Must refer to a valid jwk. Minimum 3 characters.'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  
Resources:
  ##### ##### #####
  ##### Database
  ##### ##### #####
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
        - 
          AttributeName: "connectionId"
          AttributeType: "S"
        - 
          AttributeName: "groupId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        -
          IndexName: "ConnectionIdIndex"
          KeySchema:
            -
              AttributeName: "connectionId"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "group"
              - "groupId"
            ProjectionType: "INCLUDE"
        -
          IndexName: "GroupIdIndex"
          KeySchema:
            -
              AttributeName: "groupId"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "connectionId"
              - "firebaseToken"
            ProjectionType: "INCLUDE"

  GroupsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
        - 
          AttributeName: "bubble"
          AttributeType: "S"
        - 
          AttributeName: "groupSize"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        -
          IndexName: "BubbleIndex"
          KeySchema:
            -
              AttributeName: "bubble"
              KeyType: "HASH"
            -
              AttributeName: "groupSize"
              KeyType: "RANGE"
          Projection:
            NonKeyAttributes:
              - "groupSize"
            ProjectionType: "INCLUDE"

  ##### ##### #####
  ##### Http
  ##### ##### #####
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefaultRouteSettings:
        ThrottlingBurstLimit: !Ref ApiThrottlingBurstLimit
        ThrottlingRateLimit: !Ref ApiThrottlingRateLimit
      Auth:
        DefaultAuthorizer: OAuth2Authorizer
        Authorizers:
          OAuth2Authorizer:
            JwtConfiguration:
              issuer: "https://raw.githubusercontent.com/AdrKacz/super-duper-guacamole/main/chat-backend"
              audience:
                - user
            IdentitySource: "$request.header.Authorization"
  # Sign up
  HttpPutSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/put/sign-up
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sign-up
            Method: PUT
            Auth:
              Authorizer: NONE

  HttpPutSignUpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpPutSignUpFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # Sign in
  HttpPutSignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/put/sign-in
      Environment:
        Variables:
          JWK_PRIVATE_KEY: !Sub '{{resolve:ssm:jwk_private_key_${AuthenticationStage}:1}}'
          AUTHENTICATION_STAGE: !Ref AuthenticationStage
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sign-in
            Method: PUT
            Auth:
              Authorizer: NONE

  HttpPutSignInLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpPutSignInFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # DELETE /unread-data
  HttpDeleteUnreadDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/delete/unread-data
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /unread-data
            Method: DELETE
  HttpDeleteUnreadDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpDeleteUnreadDataFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # GET /status
  HttpGetStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/get/status
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /status
            Method: GET
  HttpGetStatusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpGetStatusFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # GET /unread-data
  HttpGetUnreadDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/get/unread-data
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref UsersTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /unread-data
            Method: GET
  HttpGetUnreadDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpGetUnreadDataFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # POST /text-message
  HttpPostTextMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/post/text-message
      Environment:
        Variables:
          WEB_SOCKET_ENDPOINT: !Sub '${WebSocketApi.ApiEndpoint}/${StageName}'
          FIREBASE_SERVICE_ACCOUNT_KEY: '{{resolve:ssm:firebase_service_account_key:1}}'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTable
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${StageName}/POST/*'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /text-message
            Method: POST

  HttpPostTextMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpPostTextMessageFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # POST /change-group
  HttpPostChangeGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/post/change-group
      Environment:
        Variables:
          WEB_SOCKET_ENDPOINT: !Sub '${WebSocketApi.ApiEndpoint}/${StageName}'
          FIREBASE_SERVICE_ACCOUNT_KEY: '{{resolve:ssm:firebase_service_account_key:1}}'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref GroupsTable
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${StageName}/POST/*'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /change-group
            Method: POST

  HttpPostChangeGroupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpPostChangeGroupFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # PUT /firebase-token
  HttpPutFirebaseTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/put/firebase-token/
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /firebase-token
            Method: PUT

  HttpPutFirebaseTokenLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpPutFirebaseTokenFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # PUT /request-ban
  HttpPutRequestBanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/put/request-ban
      Environment:
        Variables:
          WEB_SOCKET_ENDPOINT: !Sub '${WebSocketApi.ApiEndpoint}/${StageName}'
          FIREBASE_SERVICE_ACCOUNT_KEY: '{{resolve:ssm:firebase_service_account_key:1}}'
          CONFIRMATION_REQUIRED_STRING: !Ref ConfirmationRequired
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTable
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${StageName}/POST/*'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /request-ban
            Method: PUT

  HttpPutRequestBanLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpPutRequestBanFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # PUT /reply-ban
  HttpPutReplyBanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/put/reply-ban
      Environment:
        Variables:
          WEB_SOCKET_ENDPOINT: !Sub '${WebSocketApi.ApiEndpoint}/${StageName}'
          FIREBASE_SERVICE_ACCOUNT_KEY: '{{resolve:ssm:firebase_service_account_key:1}}'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - DynamoDBCrudPolicy:
          TableName: !Ref GroupsTable
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${StageName}/POST/*'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /reply-ban
            Method: PUT

  HttpPutReplyBanLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HttpPutReplyBanFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  ##### ##### #####
  ##### Web Socket
  ##### ##### #####

  # Api
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'WebSocketApi-${StageName}'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # Authorizer
  WebSocketApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties: 
      Name: !Sub 'WebSocketApiAuthorizer-${StageName}'
      ApiId: !Ref WebSocketApi
      AuthorizerType: REQUEST
      AuthorizerUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketApiAuthorizerFunction.Arn}/invocations
      IdentitySource: 
        - route.request.querystring.token

  WebSocketApiAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/authorizer/
      Environment:
        Variables:
          AUTHENTICATION_STAGE: !Ref AuthenticationStage
  WebSocketApiAuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketApiAuthorizerFunction
      Principal: apigateway.amazonaws.com
  WebSocketApiAuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${WebSocketApiAuthorizerFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  # On connect
  WebSocketOnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/on-connect/
      Environment:
        Variables:
          WEB_SOCKET_ENDPOINT: !Sub '${WebSocketApi.ApiEndpoint}/${StageName}'
          FIREBASE_SERVICE_ACCOUNT_KEY: '{{resolve:ssm:firebase_service_account_key:1}}'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTable
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${StageName}/POST/*'
  WebSocketOnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
       - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketOnConnectFunction
      Principal: apigateway.amazonaws.com
  WebSocketOnConnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${WebSocketOnConnectFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  WebSocketOnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketApiAuthorizer
      OperationName: WebSocketOnConnectRoute
      Target: !Sub integrations/${WebSocketOnConnectIntegration}
  WebSocketOnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketOnConnectFunction.Arn}/invocations

  # On disconnect
  WebSocketOnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/on-disconnect/
      Environment:
        Variables:
          WEB_SOCKET_ENDPOINT: !Sub '${WebSocketApi.ApiEndpoint}/${StageName}'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - DynamoDBReadPolicy:
          TableName: !Ref GroupsTable
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
  WebSocketOnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
       - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketOnDisconnectFunction
      Principal: apigateway.amazonaws.com
  WebSocketOnDisconnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${WebSocketOnDisconnectFunction}'
      RetentionInDays: !Ref LogRetentionInDays

  WebSocketOnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: WebSocketOnDisconnectRoute
      Target: !Sub integrations/${WebSocketOnDisconnectIntegration}
  WebSocketOnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketOnDisconnectFunction.Arn}/invocations

  # Stage
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketOnConnectRoute
      - WebSocketOnDisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi
      DefaultRouteSettings:
        ThrottlingBurstLimit: !Ref WebSocketThrottlingBurstLimit
        ThrottlingRateLimit: !Ref WebSocketThrottlingRateLimit

Outputs:
  UsersTableArn:
    Description: "Users table ARN"
    Value: !GetAtt UsersTable.Arn

  GroupsTableArn:
    Description: "Groups table ARN"
    Value: !GetAtt GroupsTable.Arn

  HttpURI:
    Description: "The HTTPS API URI to connect to"
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/'

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Sub '${WebSocketApi.ApiEndpoint}/${WebSocketStage}'